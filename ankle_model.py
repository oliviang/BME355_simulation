import collections
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import fsolve
from scipy.integrate import solve_ivp
from scipy.interpolate import interp1d
from scipy import signal
#from FESsignal import trapezoid_wave

class AnkleModel:
    """
    TA muscle model adapted from Benoussaad et al. (2013)
    """
    def __init__(self):
        self.Tact = 0.01 #s (Activation constant time)
        self.Tdeact = 0.04 #s (Relaxation constant time)
        self.J = 0.0197 # kg.m^2 (Inertia of the foot around ankle)
        self.d = 3.7 # cm (moment arm of TA wrt ankle)
        self.tendon_length = 22.3 #cm   Model assumes constant tendon length
        self.resting_length_muscle_tendon = 32.1 #cm
        self.av = 1.33
        self.fv1 = 0.18
        self.fv2 = 0.023
        self.vmax = -0.9 #m/s
        self.Fmax = 600 #N
        self.W = 0.56 #shape parameter of f_fl
        self.a = [2.1, -0.08, -7.97, 0.19, -1.79]
        #optimal_length_CE is the "optimal length of the fiber at which the maximal force can be generated"
        self.optimal_length_CE = 7.5 #cm - source: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3130447/
        self.m = 1.0275 #kg (mass of foot)
        self.COM = 11.45 #cm (center of mass location with respect to the ankle)

    def F_m(self, x, x_ext):
        """
        :param x: state vector
        :param x_ext: external states
        :return: TA muscular force induced by electrical stimulation (Fm)
        """
        return x[0]*self.Fmax*self.f_fl(x, x_ext)*self.f_fv(x, x_ext)

    def f_fl(self, x, x_ext):
        """
       :param x: state vector
       :param x_ext: external states
       :return: force (f_fl) due to TA muscle length
       """
        return np.exp(-pow((self.CE_length(x, x_ext)-self.optimal_length_CE)/(self.W*self.optimal_length_CE), 2))

        
    def f_fv(self, x, x_ext):
        """
       :param x: state vector
       :param x_ext: external states
       :return: force (f_fv) due to muscle contraction speed
       """
        v_ce = self.d*(x_ext[3]-x[2]) # muscle contraction speed
        if v_ce < 0:
            return (1-v_ce/self.vmax)/(1+v_ce/(self.vmax*self.fv1))
        else:
            return (1+self.av*(v_ce/self.fv2))/(1+(v_ce/self.fv2))
        
    def CE_length(self, x, x_ext):
        """
        :param x: state vector
        :param x_ext: external states
        :return: length of contractile element
        """
        #model assumes constant tendon length
        lmt = self.resting_length_muscle_tendon + self.d*(x_ext[2]-x[1])
        return lmt - self.tendon_length

    def T_grav(self, x):
        """
        :param x: state vector
        :return: torque of the foot around the ankle due to gravity
        """
        g = 9.81 #gravity acceleration
        return self.m*self.COM*np.cos(x[1])*g

    def T_acc(self, x, x_ext):
        """
        :param x: state vector
        :param x_ext: external states
        :return: torque due to movement of the ankle
        """
        return self.m*self.COM*(x_ext[0]*np.sin(x[1]-x_ext[1]*np.cos(x[1])))

    def T_ela(self, x):
        """
        :param x: state vector
        :return: passive elastic torque of the foot around the ankle due to passive muscles and tissues
        """
        return np.exp(self.a[0]+self.a[1]*x[1])-np.exp(self.a[2]+self.a[3]*x[1])+self.a[4]

    def get_derivative(self, t, x, x_ext_1,x_ext_2,x_ext_3,x_ext_4, u):
        """
        :param t: time
        :param u: normalized muscle excitation (0 <= E <=1 )
        :param x: state variables [normalized activation level of TA muscle; foot-ankle angle; rotational velocity of foot]
        :param x_ext: external states
        :return: time derivatives of state variables
        """
        u_val = u(t)
        x_ext = [x_ext_1(t),x_ext_2(t),x_ext_3(t),x_ext_4(t)]

        B = 1 #viscosity parameter
        x1_dot = (u_val-x[0])*(u_val/self.Tact-(1-u_val)/self.Tdeact)
        x2_dot = x[2]
        x3_dot = ((1/self.J)*self.F_m(x, x_ext)*self.d) + self.T_grav(x) + self.T_acc(x, x_ext) + self.T_ela(x) + B

        return [x1_dot, x2_dot, x3_dot]

def set_x_ext():
    """
   :param x_ext: external states (linear horizontal acc, linear vertical acc, absolute orientation of shank, absolute rotational velocity)
   :return: x_ext: external states returned
   """
    x_ext_1 = np.array([
        [1.2899452775805145, 0.7301892309620284],
        [1.916537867078823, 0.714399097706671],
        [2.5406240862191396, 0.6906721249843348],
        [3.164710305359449, 0.6669451522619991],
        [3.788796524499766, 0.6432181795396632],
        [4.249968670370521, 0.6035966414637202],
        [4.711140816241276, 0.5639751033877771],
        [5.02443711099043, 0.5560800367600984],
        [5.332720665023597, 0.5323112911984627],
        [5.641004219056764, 0.5085425456368264],
        [5.941768662015949, 0.4609632816742548],
        [6.400434437528716, 0.4134049041313337],
        [6.861606583399471, 0.3737833660553904],
        [7.796482726930947, 0.33422448723839704],
        [8.262667613517685, 0.3104766280964113],
        [8.728852500104427, 0.28672876895442556],
        [9.034629683779603, 0.25502318392581147],
        [9.82413634654747, 0.255127616024061],
        [11.087347006976056, 0.2552947073812608],
        [12.192656334851076, 0.2554409123188104],
        [13.297965662726092, 0.25558711725635996],
        [14.242867287689542, 0.2477755963072803],
        [15.506077948118126, 0.24794268766448013],
        [16.92969631145828, 0.25606750490830876],
        [17.87710430677972, 0.2561928234262081],
        [18.824512302101162, 0.25631814194410785],
        [20.08521659217177, 0.24854839383432825],
        [21.34842725260036, 0.24871548519152809],
        [22.772045615940513, 0.2568403024353567],
        [23.561552278708376, 0.2569447345336062],
        [24.666861606583396, 0.2570909394711558],
        [25.93007226701198, 0.2572580308283552],
        [27.03788796524499, 0.26534107523288375],
        [27.669493295459283, 0.26542462091148344],
        [28.92769121517189, 0.2497180333347253],
        [30.193408245958466, 0.2578219641589037],
        [31.614520238940635, 0.25800994193575333],
        [31.930322904047785, 0.2580517147750534],
        [33.193533564476375, 0.2582188061322528],
        [34.29884289235139, 0.25836501106980236],
        [35.4041522202264, 0.25851121600735194],
        [36.50946154810142, 0.2586574209449015],
        [37.45686954342286, 0.2587827394628013],
        [38.4042775387443, 0.25890805798070105],
        [39.82288316136847, 0.2511591962905717],
        [41.24399515435064, 0.2513471740674209],
        [42.507205814779226, 0.25151426542462074],
        [43.77041647520782, 0.25168135678182013],
        [45.031120765278416, 0.24391160867204098],
        [46.61013409081414, 0.24412047286854044],
        [47.715443418689176, 0.24426667780609002],
        [48.34704874890346, 0.24435022348469015],
        [49.13404904131333, 0.23651781611596112],
        [50.38472784995194, 0.19700071013826825],
        [51.3271231045574, 0.1812523497222105],
        [52.264505618446876, 0.1496303103721961],
        [52.73319687539161, 0.1338192906971889],
        [53.19687539162035, 0.10213459208822417],
        [53.971343832240265, 0.05461798738460244],
        [54.440035089185, 0.03880696770959524],
        [55.06161493796732, 0.007143155520280775],
        [55.367392121642496, -0.02456242950833376],
        [55.82856426751326, -0.06418396758427702],
        [55.966414637202874, -0.12765779690045553],
        [56.738376707464795, -0.1831112410710558],
        [57.209574334767524, -0.19098542127908447],
        [57.82363507247587, -0.24645975186933455],
        [58.44772129161619, -0.2701867245916705],
        [59.54551150841722, -0.2938510380550565],
        [60.635782614144276, -0.34132586991937863],
        [61.898993274572874, -0.34115877856217924],
        [62.69100630769873, -0.33311750699695075],
        [63.335143489702986, -0.2933497639834579],
        [64.60837963156355, -0.2614353147583439],
        [64.93170140774467, -0.23758302351810867],
        [65.73373992230252, -0.19779439408496602],
        [66.37537073394877, -0.16596349053845172],
        [67.01950791595304, -0.12619574752495932],
        [67.6661514683153, -0.07849116504448839],
        [68.6260913154267, -0.03868164919169592],
        [69.58352479218013, -0.006808972805881108],
        [70.38806967709596, 0.04091649609423964],
        [70.87681189690463, 0.08860019215506076],
        [71.36054137599733, 0.12041020928192481],
        [72.0021721876436, 0.1522411128284391],
        [72.80421070220142, 0.19202974226158176],
        [73.76916329002881, 0.24771293704833086],
        [74.25289276912152, 0.27952295417519535],
        [75.21032624587494, 0.3113956305610093],
        [75.8469443168052, 0.32735285517356605],
        [76.80187142320062, 0.35128869209240143],
        [77.4384894941309, 0.3672459167049582],
        [78.23802163833075, 0.39909770667112276],
        [79.19545511508416, 0.43097038305693647],
        [80.1503822214796, 0.45490621997577185],
        [81.10530932787502, 0.478842056894607],
        [81.74694013952127, 0.5106729604411213],
        [82.86227494882826, 0.5425665232465855],
        [84.45632649651195, 0.5903964242449564],
        [85.41125360290738, 0.6143322611637916],
        [86.53160115293035, 0.6620995029032126],
        [87.48903462968377, 0.6939721792890265],
        [88.29357951459959, 0.7416976481891477],
        [89.09060528844145, 0.7656125986883331],
        [89.72972972972973, 0.7895066627678686],
        [90.69217594719913, 0.8372530180876396],
        [91.80751075650612, 0.8691465808931036],
        [92.9228455658131, 0.9010401436985673],
        [93.88027904256651, 0.9329128200843815],
        [94.99060111115752, 0.9489327039558884],
        [96.41171310413968, 0.9491206817327378],
        [97.5145160616567, 0.9413300472033088],
        [98.61230627845774, 0.9176657337399226],
        [99.39429383015163, 0.8939596474372367],
        [100.16876227077154, 0.8464430427336149]
    ])
    x = 1.25 * ((x_ext_1[:, 0]) / 100)
    y = x_ext_1[:, 1]
    f1 = interp1d(x, y, fill_value="extrapolate")

    x_ext_2 = np.array([
        [0.5270276798222309, -1.1259842519685037],
        [1.0791749190860358, -1.1259842519685037],
        [1.447273078595238, -1.1259842519685037],
        [2.1805709869088457, -1.1181102362204722],
        [2.545770735713253, -1.1102362204724405],
        [3.2703734119124697, -1.0787401574803148],
        [3.9978744988164863, -1.0551181102362202],
        [4.535529684556302, -1.0157480314960627],
        [5.257233950050722, -0.9763779527559051],
        [6.3586300178735335, -0.9685039370078736],
        [7.278875416646542, -0.9685039370078736],
        [8.56721897492875, -0.9685039370078736],
        [8.935317134437952, -0.9685039370078736],
        [10.22366069272016, -0.9685039370078736],
        [11.143906091493164, -0.9685039370078736],
        [12.067049900970968, -0.9763779527559051],
        [12.803246219989372, -0.9763779527559051],
        [14.09158977827158, -0.9763779527559051],
        [15.37993333655379, -0.9763779527559051],
        [16.668276894835998, -0.9763779527559051],
        [17.772571373363608, -0.9763779527559051],
        [18.69281677213661, -0.9763779527559051],
        [20.533307569682627, -0.9763779527559051],
        [21.08545480894643, -0.9763779527559051],
        [22.005700207719435, -0.9763779527559051],
        [23.109994686247042, -0.9763779527559051],
        [24.58238732428385, -0.9763779527559051],
        [25.31858364330226, -0.9763779527559051],
        [26.060576783730248, -0.9921259842519683],
        [26.618520844403648, -1.0078740157480313],
        [27.906864402685855, -1.0078740157480313],
        [29.01115888121346, -1.0078740157480313],
        [30.115453359741075, -1.0078740157480313],
        [30.85164967875948, -1.0078740157480313],
        [31.771895077532484, -1.0078740157480313],
        [32.69214047630549, -1.0078740157480313],
        [33.796434954833096, -1.0078740157480313],
        [34.90072943336071, -1.0078740157480313],
        [35.636925752379106, -1.0078740157480313],
        [36.928167721366115, -1.0157480314960627],
        [38.03536061059852, -1.0236220472440942],
        [38.596203081976704, -1.0472440944881887],
        [39.5280421235689, -1.0787401574803148],
        [40.454084343751504, -1.0944881889763776],
        [41.0178252258345, -1.1259842519685037],
        [41.58156610791749, -1.1574803149606296],
        [42.32355924834548, -1.1732283464566928],
        [42.700352639969076, -1.196850393700787],
        [43.26409352205207, -1.2283464566929132],
        [43.27858557557605, -1.2677165354330706],
        [44.21622143857784, -1.3149606299212597],
        [45.33210955992463, -1.3464566929133854],
        [46.26394860151683, -1.3779527559055116],
        [47.37983672286363, -1.4094488188976377],
        [48.12762668470122, -1.4409448818897637],
        [49.0594657262934, -1.4724409448818898],
        [49.98840635718081, -1.4960629921259843],
        [50.733297908313595, -1.5196850393700785],
        [51.6593401284962, -1.5354330708661417],
        [52.94768368677842, -1.5354330708661417],
        [53.67808318438722, -1.5196850393700785],
        [54.22443360224142, -1.5039370078740155],
        [54.76208878798124, -1.464566929133858],
        [55.118593304671265, -1.433070866141732],
        [55.647553258296696, -1.37007874015748],
        [56.18810685474131, -1.3385826771653542],
        [56.71996521907154, -1.2834645669291336],
        [56.73155886189072, -1.3149606299212597],
        [57.43877107386116, -1.2362204724409447],
        [57.97932467030577, -1.2047244094488188],
        [58.51408144534079, -1.1574803149606296],
        [59.05463504178542, -1.1259842519685037],
        [59.411139558475426, -1.0944881889763776],
        [59.58069658470605, -1.0551181102362202],
        [60.12125018115066, -1.0236220472440942],
        [60.454567412202294, -0.9291338582677162],
        [60.47485628713588, -0.9842519685039368],
        [61.16467803487754, -0.8582677165354327],
        [61.51828414086275, -0.8188976377952752],
        [61.86609342543838, -0.7637795275590548],
        [62.029853630259396, -0.7086614173228343],
        [62.386358146949405, -0.6771653543307082],
        [62.91241968987005, -0.6062992125984248],
        [62.92691174339403, -0.6456692913385823],
        [63.62832713395487, -0.5511811023622043],
        [64.17177914110428, -0.5275590551181097],
        [65.27607361963189, -0.5275590551181097],
        [65.6499686005507, -0.5433070866141727],
        [66.77165354330708, -0.5905511811023617],
        [67.14554852422587, -0.6062992125984248],
        [67.34119124679967, -0.6377952755905508],
        [67.91072895029224, -0.6850393700787397],
        [68.47736824308002, -0.7244094488188972],
        [68.67301096565383, -0.7559055118110233],
        [69.42949615960582, -0.8110236220472438],
        [69.9932370416888, -0.8425196850393698],
        [70.55987633447658, -0.8818897637795272],
        [70.55987633447658, -0.8818897637795272],
        [71.49461378677357, -0.9212598425196847],
        [72.60470508671077, -0.9370078740157477],
        [73.34090140572918, -0.9370078740157477],
        [74.63504178542098, -0.9527559055118107],
        [75.56398241630836, -0.9763779527559051],
        [76.49292304719577, -0.9999999999999998],
        [77.24071300903337, -1.0314960629921257],
        [78.16385681851118, -1.0393700787401572],
        [79.45509878749817, -1.0472440944881887],
        [81.10574368388, -1.0314960629921257],
        [82.7621854016714, -1.0314960629921257],
        [83.4983817206898, -1.0314960629921257],
        [84.22878121829862, -1.0157480314960627],
        [85.13743297425243, -0.9842519685039368],
        [85.86783247186125, -0.9685039370078736],
        [86.96343171827446, -0.9448818897637792],
        [87.88077870634268, -0.9370078740157477],
        [89.34447611226508, -0.9133858267716533],
        [90.43717694797351, -0.8818897637795272],
        [91.1733732669919, -0.8818897637795272],
        [92.27476933481474, -0.8740157480314957],
        [93.56311289309694, -0.8740157480314957],
        [94.85145645137915, -0.8740157480314957],
        [95.59634800251195, -0.8976377952755903],
        [96.70933771315394, -0.9212598425196847],
        [97.46002608569633, -0.9606299212598421],
        [98.20781604753394, -0.9921259842519683],
        [98.76865851891212, -1.0157480314960627]
    ])
    x = 1.25 * ((x_ext_2[:, 0]) / 100)
    y = x_ext_2[:, 1]
    f2 = interp1d(x, y, fill_value="extrapolate")

    # CHANGE THESE VALUES
    x_ext_3 = np.array([
        [2.8359375, -11.587030716723547],
        [2.8515625, -11.416382252559725],
        [2.8671875, -11.16040955631399],
        [2.875, -10.989761092150168],
        [2.8828125, -10.392491467576786],
        [2.890625, -10.051194539249146],
        [2.8984375, -9.624573378839589],
        [2.90625, -9.197952218430032],
        [2.9140625, -8.941979522184297],
        [2.921875, -8.51535836177474],
        [2.9296875, -8.088737201365184],
        [2.9375, -7.406143344709896],
        [2.9453125, -6.723549488054605],
        [2.953125, -5.69965870307167],
        [2.9609374999999996, -5.187713310580204],
        [2.953125, -5.443686006825935],
        [2.9687500000000004, -4.846416382252556],
        [2.9687500000000004, -4.590443686006825],
        [2.9687500000000004, -4.249146757679181],
        [2.9765625, -3.993174061433443],
        [2.9921875, -2.9692832764505113],
        [3, -2.030716723549485],
        [3.0078125, -1.4334470989761066],
        [3.015625, -0.7508532423208152],
        [3.0234375, 0.017064846416385393],
        [3.03125, 0.784982935153586],
        [3.0390625, 1.4675767918088756],
        [3.046875, 2.150170648464165],
        [3.0546875, 3.0034129692832767],
        [3.0625, 3.515358361774746],
        [3.0546875, 3.3447098976109224],
        [3.0625, 3.771331058020479],
        [3.0703125, 4.539249146757681],
        [3.0781249999999996, 5.221843003412971],
        [3.0859375000000004, 5.477815699658704],
        [3.09375, 6.245733788395906],
        [3.1015625, 6.501706484641639],
        [3.109375, 7.184300341296931],
        [3.1171875, 7.440273037542664],
        [3.125, 8.122866894197955],
        [3.1328125, 8.378839590443686],
        [3.1484375, 8.976109215017065],
        [3.15625, 9.31740614334471],
        [3.1640625, 9.573378839590445],
        [3.1796875, 9.744027303754267],
        [3.1953125, 9.829351535836178],
        [3.2109375000000004, 9.658703071672356],
        [3.2265625, 9.488054607508534],
        [3.2421875, 9.31740614334471],
        [3.25, 9.061433447098977],
        [3.2578125, 8.805460750853243],
        [3.265625, 8.54948805460751],
        [3.2734375, 8.293515358361777],
        [3.2890625, 8.037542662116042],
        [3.2890625, 7.781569965870309],
        [3.3046875, 7.5255972696245745],
        [3.3203125, 6.928327645051196],
        [3.3359375000000004, 6.58703071672355],
        [3.34375, 6.245733788395906],
        [3.3515625, 5.989761092150172],
        [3.359375, 5.733788395904437],
        [3.3671875, 5.392491467576793],
        [3.3828125, 5.13651877133106],
        [3.3984375, 4.965870307167236],
        [3.4140625, 4.709897610921503],
        [3.4296875, 4.539249146757681],
        [3.4453125, 4.368600682593858],
        [3.4609375000000004, 4.112627986348125],
        [3.46875, 4.027303754266212],
        [3.484375, 3.85665529010239],
        [3.4921875, 3.686006825938568],
        [3.515625, 3.515358361774746],
        [3.5390625, 3.3447098976109224],
        [3.5625, 3.3447098976109224],
        [3.5859375, 3.430034129692835],
        [3.609375, 3.515358361774746],
        [3.6171875, 3.686006825938568],
        [3.625, 3.85665529010239],
        [3.640625, 4.112627986348125],
        [3.65625, 4.368600682593858],
        [3.6796875, 4.539249146757681],
        [3.6875, 4.880546075085325],
        [3.703125, 5.221843003412971],
        [3.7265625, 5.392491467576793],
        [3.7421875, 5.563139931740615],
        [3.7578125, 5.392491467576793],
        [3.7734375, 5.221843003412971],
        [3.78125, 4.965870307167236],
        [3.7890625, 4.709897610921503],
        [3.796875, 4.4539249146757705],
        [3.8046875, 4.283276450511947],
        [3.8125, 4.027303754266212],
        [3.8203125, 3.686006825938568],
        [3.828125, 3.3447098976109224],
        [3.8359375, 3.0034129692832767],
        [3.84375, 2.7474402730375456],
        [3.8515625, 1.8941979522184322],
        [3.859375, 1.4675767918088756],
        [3.8671875, 1.1262798634812299],
        [3.875, 0.529010238907853],
        [3.8828125, 0.18771331058020735],
        [3.890625, -0.15358361774743656],
        [3.8984375, -0.4095563139931713],
        [3.90625, -1.0921501706484626],
        [3.9140625, -1.3481228668941938],
        [3.921875, -1.945392491467576],
        [3.9296875, -2.28668941979522],
        [3.9375, -2.7133105802047766],
        [3.9453125, -2.9692832764505113],
        [3.953125, -3.6518771331058026],
        [3.9609375, -3.993174061433443],
        [3.96875, -4.419795221843003],
        [3.9765625, -4.675767918088734],
        [3.9765625, -5.443686006825935],
        [3.984375, -5.870307167235492],
        [3.9921875, -6.2116040955631355],
        [4, -6.382252559726961],
        [4.0078125, -6.894197952218427],
        [4.015625, -7.406143344709896],
        [4.0234375, -7.662116040955631],
        [4.03125, -8.430034129692832],
        [4.0390625, -8.600682593856654],
        [4.046875, -8.856655290102385],
        [4.046875, -9.11262798634812],
        [4.0546875, -9.453924914675767],
        [4.0625, -9.624573378839589],
        [4.0703125, -9.965870307167233],
        [4.0859375, -10.051194539249146]
    ])
    x = x_ext_3[:, 0] - 2.8359375
    y = x_ext_3[:, 1]
    f3 = interp1d(x, y, fill_value="extrapolate")

    x_ext_4 = np.array([
        [-0.08456843940714975, -26.00697471665211],
        [1.2074978204010485, -32.476024411508206],
        [2.5021795989537914, -42.197035745422795],
        [3.7968613775065343, -51.918047079337384],
        [5.413251961639062, -61.630340017436765],
        [6.383609415867479, -68.10810810810807],
        [8.311246730601567, -64.80383609415861],
        [9.591543156059284, -56.63905841325197],
        [10.871839581516998, -48.474280732345164],
        [12.152136006974722, -40.309503051438526],
        [13.429816913687883, -28.892763731473394],
        [15.356146469049698, -23.96251089799472],
        [17.609415867480386, -25.527462946817764],
        [19.377506538796865, -23.85353095030507],
        [20.98605056669573, -23.809938971229258],
        [23.559721011333913, -23.740191804707877],
        [25.327811682650385, -22.066259808195298],
        [27.74193548387096, -23.626852659110682],
        [29.351787271142115, -25.20924149956403],
        [30.96294681778553, -28.417611159546595],
        [32.5767218831735, -34.8779424585876],
        [34.35135135135135, -41.33391455972094],
        [35.95989537925022, -41.290322580645125],
        [37.89668700959024, -49.367916303400136],
        [39.8308631211857, -54.19354838709671],
        [41.601569311246735, -55.77157802964251],
        [43.70052310374891, -65.4707933740192],
        [45.47515257192676, -71.92676547515254],
        [47.24978204010462, -78.38273757628593],
        [49.508282476024405, -86.4516129032258],
        [51.441150828247615, -89.65126416739315],
        [53.69180470793374, -87.96425457715776],
        [55.29773321708805, -84.66870095902351],
        [56.57541412380124, -73.25196163905832],
        [57.04489973844812, -56.9790758500435],
        [58.160418482999134, -43.94071490845681],
        [59.27332170880558, -27.65039232781163],
        [60.38622493461203, -11.360069747166449],
        [61.18003487358325, 1.6695727986050883],
        [62.456408020924144, 14.712292938099438],
        [63.56931124673059, 31.00261551874462],
        [64.52266782911944, 45.662598081953035],
        [65.640802092415, 55.448997384481345],
        [66.91586748038362, 70.11769834350486],
        [68.51002615518746, 88.04707933740201],
        [70.11072362685266, 97.84655623365305],
        [71.7101133391456, 109.27201394943341],
        [73.14864864864865, 120.69311246730612],
        [74.58979947689626, 128.86224934612042],
        [76.03356582388841, 133.77942458587628],
        [77.64210985178727, 133.82301656495213],
        [79.56843940714909, 138.75326939843077],
        [80.85658238884047, 137.16216216216228],
        [82.46643417611159, 135.5797733217089],
        [84.08020924149957, 129.11944202266793],
        [85.85745422842197, 119.41150828247609],
        [87.31299040976461, 109.69485614646916],
        [89.09285091543157, 96.73496076721892],
        [90.39014821272885, 83.76198779424595],
        [91.2048823016565, 70.77593722755017],
        [92.34001743679163, 59.424585876198876],
        [93.47776809067133, 44.821272885789085],
        [94.4507410636443, 35.091543156059345],
        [95.75065387968614, 18.86660854402794],
        [97.21142109851787, 2.64603312990414],
        [98.66434176111596, -3.818657367044409]
    ])
    x = 1.25 * ((x_ext_4[:, 0]) / 100)
    y = x_ext_4[:, 1]
    f4 = interp1d(x, y, fill_value="extrapolate")

    return f1, f2, f3, f4

def input(t):
    # return 0.3
    # return np.sin(t) / 2 + 0.5
    return np.sin(3*t)/3+0.6

def trapezoid_wave(t, width=1.25, slope=1., amp=0.5):
    a = slope*width*signal.sawtooth(2*np.pi*t/width, width=0.5)/4.
    if a>amp/2.:
        a = amp/2.
    elif a<-amp/2.:
        a = -amp/2.
    return a + amp/2.

(x_ext_1,x_ext_2,x_ext_3,x_ext_4) = set_x_ext()
ankle = AnkleModel()
# sol = solve_ivp(ankle.get_derivative,[0,6],[0.8,8,-4],rtol = 1e-5, atol = 1e-8,args=(x_ext_1,x_ext_2,x_ext_3,x_ext_4,input))
sol = solve_ivp(ankle.get_derivative,[0,3],[0.5,-15,0],rtol = 1e-5, atol = 1e-8,args=(x_ext_1,x_ext_2,x_ext_3,x_ext_4,trapezoid_wave))
#sol = solve_ivp(ankle.get_derivative,[0,3],[0.2,-11,-25],rtol = 1e-5, atol = 1e-8,args=(x_ext_1,x_ext_2,x_ext_3,x_ext_4,input))
times = sol.t
states = sol.y.T

plt.subplot(3, 1, 1)
plt.plot(times,states[:,0])
plt.xlabel('Time (s)')
plt.ylabel('Activation')
plt.subplot(3, 1, 2)
plt.plot(times,states[:,1])
plt.xlabel('Time (s)')
plt.ylabel('Angle')
plt.subplot(3, 1, 3)
plt.plot(times,states[:,2])
plt.xlabel('Time (s)')
plt.ylabel('Rotational velocity')
plt.show()